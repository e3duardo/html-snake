{"version":3,"sources":["src/Block.js","src/Food.js","src/SnakeBlock.js","src/Snake.js","src/Score.js","swipedetect.js","src/Game.js","index.js"],"names":["Block","game","tag","style","left","x","scale","top","y","parentNode","removeChild","object","colideWithX","width","colideWithY","height","backgroundSize","Food","document","querySelector","Math","floor","random","randomize","value","SnakeBlock","snake","undefined","createElement","className","sceneTag","appendChild","Snake","i","blocks","length","update","auto","clearInterval","autoMoveInterval","isPlaying","tail","push","shift","setInterval","move","colideWith","food","eat","colideWithStage","colideWithTail","died","autoMove","score","tick","tickDeath","destroy","divs","querySelectorAll","block","points","bestScore","localStorage","setItem","deaths","getElementById","innerHTML","getItem","swipedetect","el","callback","touchsurface","swipedir","startX","startY","distX","distY","startTime","handleswipe","addEventListener","e","touchobj","changedTouches","pageX","pageY","Date","getTime","preventDefault","abs","Game","stageTag","offsetWidth","offsetHeight","playingInterval","playing","key","play","pause","Score","resize","moveSnake","window","onblur"],"mappings":"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","file":"snake.3af26786.js","sourceRoot":"..","sourcesContent":["class Block {\n\tconstructor(game, tag) {\n\t\tthis.game = game;\n\t\tthis.tag = tag;\n\t\tthis.tag.style.backgroundSize = this.game.scale+'px';\n\t\tthis.tag.style.width = this.game.scale+'px';\n\t\tthis.tag.style.height = this.game.scale+'px';\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\t}\n\n\tupdate = ()=>{\n\t\tthis.tag.style.left = (this.x*this.game.scale) +'px';\n\t\tthis.tag.style.top = (this.y*this.game.scale) +'px';\n\t}\n\n\tdestroy = ()=>{\n\t\tthis.tag.parentNode.removeChild(this.tag);\n\t}\n\n\tcolideWith = (object)=>{\n\t\treturn this.x==object.x && this.y==object.y;\n\t}\n\n\tcolideWithStage = ()=>{\n\t\tconst colideWithX = this.x < 0 || this.x >= this.game.width/this.game.scale;\n\t\tconst colideWithY = this.y < 0 || this.y >= this.game.height/this.game.scale;\n\n\t\treturn colideWithX || colideWithY;\n\t}\n}\n\nexport {Block as default};\n","import Block from './Block';\n\nclass Food extends Block {\n\tconstructor(game) {\n\t\tsuper(game, document.querySelector('.Food'));\n\n\t\tthis.randomize();\n\t\tthis.value = 10;\n\t}\n\n\trandomize = ()=>{\n\t\tthis.x = Math.floor((Math.random() * (this.game.width / this.game.scale)));\n\t\tthis.y = Math.floor((Math.random() * (this.game.height / this.game.scale)));\n\t}\n}\n\nexport {Food as default};\n","import Block from './Block';\n\nclass SnakeBlock extends Block{\n\tconstructor(snake, tag) {\n\t\tif(tag==undefined){\n\t\t\ttag = document.createElement('div');\n\t\t\ttag.className = 'Snack Block';\n\t\t\ttag = snake.game.sceneTag.appendChild(tag);\n\t\t}\n\t\tsuper(snake.game, tag);\n\t\tthis.x = snake.x;\n\t\tthis.y = snake.y;\n\t}\n\n}\n\nexport {SnakeBlock as default};\n","import SnakeBlock from './SnakeBlock';\n\nclass Snake {\n\tconstructor(game) {\n\t\tthis.game = game;\n\t\tthis.autoMoveInterval;\n\n\t\tthis.tail = [];\n\t\tthis.length = 0;\n\n\t\tthis.blocks = [];\n\t\tconst divs = document.querySelectorAll('.Snake');\n\t\tfor (let i = 0; i < divs.length; ++i) {\n\t\t\tconst block = new SnakeBlock(this, divs[i]);\n\t\t\tthis.blocks.push(block);\n\t\t}\n\n\t\tthis.autoMove = null;\n\t}\n\n\tupdate = ()=>{\n\t\tfor (let i = 0; i < this.blocks.length; ++i) {\n\t\t\tthis.blocks[i].update();\n\t\t}\n\t}\n\n\tmove = (x, y, auto)=>{\n\t\tclearInterval(this.autoMoveInterval);\n\n\t\tif(this.game.isPlaying){\n\t\t\t//moving references\n\t\t\tthis.tail.push({x: this.x, y: this.y});\n\t\t\twhile (this.tail.length > this.length) {\n\t\t\t\tthis.tail.shift();\n\t\t\t}\n\t\t\tthis.x+=x;\n\t\t\tthis.y+=y;\n\t\t\tfor (let i = 0; i < this.tail.length; ++i) {\n\t\t\t\tthis.blocks[i+1].x = this.tail[i].x;\n\t\t\t\tthis.blocks[i+1].y = this.tail[i].y;\n\t\t\t}\n\n\t\t\t//automoving\n\t\t\tthis.autoMoveInterval = setInterval(()=>{\n\t\t\t\tthis.move(x, y, true);\n\t\t\t}, 300);\n\n\t\t\t//eat\n\t\t\tif(this.blocks[0].colideWith(this.game.food)){\n\t\t\t\tthis.eat();\n\t\t\t}\n\n\t\t\tif(this.blocks[0].colideWithStage() || this.colideWithTail()){\n\t\t\t\tthis.died();\n\t\t\t}\n\t\t}else if(auto){\n\t\t\tthis.autoMove = {x: x, y: y};\n\t\t}\n\t}\n\n\tcolideWithTail = ()=>{\n\t\tfor (var i = 1; i < this.tail.length; i++) {\n\t\t\tif(this.blocks[0].colideWith(this.blocks[i])){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\teat = ()=>{\n\t\tthis.game.score.tick();\n\t\tthis.game.food.randomize();\n\n\t\tthis.length++;\n\t\tthis.blocks.push(new SnakeBlock(this));\n\t}\n\n\tdied = ()=>{\n\t\tthis.game.score.tickDeath();\n\t\tthis.game.food.randomize();\n\n\t\tclearInterval(this.autoMoveInterval);\n\n\t\twhile(this.blocks.length>1){\n\t\t\tthis.blocks.shift().destroy();\n\t\t}\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\t\tthis.length=0;\n\t}\n\n\tget x (){\n\t\tif(this.blocks.length > 0)\n\t\t\treturn this.blocks[0].x;\n\t\treturn 0;\n\t}\n\tset x (x){\n\t\tif(this.blocks.length > 0)\n\t\t\tthis.blocks[0].x = x;\n\t}\n\tget y (){\n\t\tif(this.blocks.length > 0)\n\t\t\treturn this.blocks[0].y;\n\t\treturn 0;\n\t}\n\tset y (y){\n\t\tif(this.blocks.length > 0)\n\t\t\tthis.blocks[0].y = y;\n\t}\n}\n\nexport {Snake as default};\n","class SnakeBlock {\n\tconstructor(game) {\n\t\tthis.game = game;\n\t\tthis.points = 0;\n\t\tthis.deaths = 0;\n\t\tthis.bestScore = 0;\n\t\tif(localStorage.getItem('bestScore')>0){\n\t\t\tthis.bestScore = localStorage.getItem('bestScore');\n\t\t}\n\t}\n\n\ttick = ()=>{\n\t\tif(this.game.isPlaying){\n\t\t\tthis.points+=this.game.food.value;\n\n\t\t\tif (this.points > this.bestScore){\n\t\t\t\tthis.bestScore = this.points;\n\t\t\t\tlocalStorage.setItem('bestScore', this.points);\n\t\t\t}\n\t\t}\n\t}\n\n\ttickDeath = ()=>{\n\t\tif(this.game.isPlaying){\n\t\t\tthis.points = 0;\n\t\t\tthis.deaths++;\n\t\t}\n\t}\n\n\tupdate = ()=>{\n\t\tdocument.getElementById('ScorePoints').innerHTML = this.points;\n\t\tdocument.getElementById('ScoreDeaths').innerHTML = this.deaths;\n\t\tdocument.getElementById('ScoreBestScore').innerHTML = this.bestScore;\n\t}\n\n}\n\nexport {SnakeBlock as default};\n","// credit: http://www.javascriptkit.com/javatutors/touchevents2.shtml\nfunction swipedetect(el, callback){\n\tvar touchsurface = el,\n\t\tswipedir,\n\t\tstartX,\n\t\tstartY,\n\t\tdistX,\n\t\tdistY,\n\t\tthreshold = 150, //required min distance traveled to be considered swipe\n\t\trestraint = 100, // maximum distance allowed at the same time in perpendicular direction\n\t\tallowedTime = 300, // maximum time allowed to travel that distance\n\t\telapsedTime,\n\t\tstartTime,\n\t\thandleswipe = callback || function(swipedir){};\n\n\ttouchsurface.addEventListener('touchstart', function(e){\n\t\tvar touchobj = e.changedTouches[0];\n\t\tswipedir = 'none';\n\t\tdistX = 0;\n\t\tdistY = 0;\n\t\tstartX = touchobj.pageX;\n\t\tstartY = touchobj.pageY;\n\t\tstartTime = new Date().getTime(); // record time when finger first makes contact with surface\n\t\te.preventDefault();\n\t}, false);\n\n\ttouchsurface.addEventListener('touchmove', function(e){\n\t\te.preventDefault(); // prevent scrolling when inside DIV\n\t}, false);\n\n\ttouchsurface.addEventListener('touchend', function(e){\n\t\tvar touchobj = e.changedTouches[0];\n\t\tdistX = touchobj.pageX - startX; // get horizontal dist traveled by finger while in contact with surface\n\t\tdistY = touchobj.pageY - startY; // get vertical dist traveled by finger while in contact with surface\n\t\telapsedTime = new Date().getTime() - startTime; // get time elapsed\n\t\tif (elapsedTime <= allowedTime){ // first condition for awipe met\n\t\t\tif (Math.abs(distX) >= threshold && Math.abs(distY) <= restraint){ // 2nd condition for horizontal swipe met\n\t\t\t\tswipedir = (distX < 0)? 'left' : 'right'; // if dist traveled is negative, it indicates left swipe\n\t\t\t}\n\t\t\telse if (Math.abs(distY) >= threshold && Math.abs(distX) <= restraint){ // 2nd condition for vertical swipe met\n\t\t\t\tswipedir = (distY < 0)? 'up' : 'down'; // if dist traveled is negative, it indicates up swipe\n\t\t\t}\n\t\t}\n\t\thandleswipe(swipedir);\n\t\te.preventDefault();\n\t}, false);\n}\n\nexport {swipedetect as default};\n","import Food from './Food';\nimport Snake from './Snake';\nimport Score from './Score';\n\nimport swipedetect from '../swipedetect';\n\nclass Game {\n\tconstructor(scale){\n\t\tthis.scale = scale;\n\t\tthis.playing;\n\t\tthis.playingInterval;\n\n\t\tthis.stageTag = document.querySelector('.Stage');\n\t\tthis.sceneTag = document.querySelector('.Scene');\n\n\t\tthis.sceneTag.style.backgroundSize = scale+'px';\n\n\t\tthis.snake = new Snake(this);\n\t\tthis.food = new Food(this);\n\t\tthis.score = new Score(this);\n\t\tthis.resize();\n\n\t\tdocument.addEventListener('keydown', e => this.moveSnake(e));\n\t\twindow.addEventListener('resize', e => this.resize(e));\n\n\t\tswipedetect(this.sceneTag, (swipedir)=>{\n\t\t\tif(swipedir === 'up'){\n\t\t\t\tthis.moveSnake({key:'ArrowUp'});\n\t\t\t}\n\t\t\tif(swipedir === 'right'){\n\t\t\t\tthis.moveSnake({key:'ArrowRight'});\n\t\t\t}\n\t\t\tif(swipedir === 'down'){\n\t\t\t\tthis.moveSnake({key:'ArrowDown'});\n\t\t\t}\n\t\t\tif(swipedir === 'left'){\n\t\t\t\tthis.moveSnake({key:'ArrowLeft'});\n\t\t\t}\n\t\t});\n\t}\n\n\tresize = ()=>{\n\t\tthis.sceneTag.style.width = Math.floor(this.stageTag.offsetWidth/this.scale-10)*this.scale+'px';\n\t\tthis.sceneTag.style.height = Math.floor(this.stageTag.offsetHeight/this.scale-1)*this.scale+'px';\n\t\tthis.food.randomize();\n\t}\n\tupdate = ()=>{\n\t\tthis.snake.update();\n\t\tthis.food.update();\n\t\tthis.score.update();\n\t}\n\n\tplay = (x, y)=>{\n\t\tthis.playingInterval = setInterval(this.update, 0);\n\t\tthis.playing = true;\n\n\t\tif(this.snake.autoMove != null || (x!=undefined && y!=undefined)){\n\t\t\tif(x==undefined && y==undefined){\n\t\t\t\tx=this.snake.autoMove.x;\n\t\t\t\ty=this.snake.autoMove.y;\n\t\t\t}\n\t\t\tthis.snake.move(x, y);\n\t\t\tthis.snake.autoMove = null;\n\t\t}\n\n\t\tdocument.getElementById('play').innerHTML = 'Pause';\n\t}\n\tpause = ()=>{\n\t\tclearInterval(this.playingInterval);\n\t\tthis.playing = false;\n\t\tdocument.getElementById('play').innerHTML = 'Play';\n\t}\n\n\tmoveSnake = (e)=>{\n\n\t\tswitch (e.key) {\n\t\tcase 'ArrowLeft':\n\t\t\tif(!this.isPlaying){\n\t\t\t\tthis.play(-1, 0);\n\t\t\t}else{\n\t\t\t\tthis.snake.move(-1,0);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'ArrowUp':\n\t\t\tif(!this.isPlaying){\n\t\t\t\tthis.play(0, -1);\n\t\t\t}else{\n\t\t\t\tthis.snake.move(0,-1);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'ArrowRight':\n\t\t\tif(!this.isPlaying){\n\t\t\t\tthis.play(1, 0);\n\t\t\t}else{\n\t\t\t\tthis.snake.move(1,0);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'ArrowDown':\n\t\t\tif(!this.isPlaying){\n\t\t\t\tthis.play(0, 1);\n\t\t\t}else{\n\t\t\t\tthis.snake.move(0,1);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase ' ':\n\t\t\tif(this.isPlaying){\n\t\t\t\tthis.pause();\n\t\t\t}else{\n\t\t\t\tthis.play();\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\n\t}\n\n\tget isPlaying (){\n\t\treturn this.playing;\n\t}\n\tget width (){\n\t\treturn this.sceneTag.offsetWidth;\n\t}\n\tget height (){\n\t\treturn this.sceneTag.offsetHeight;\n\t}\n}\n\nexport { Game as default };\n","import Game from './src/Game';\n\nconst game = new Game(20);\ngame.update();\n// game.play();\n\n(function(){\n\n\tdocument.getElementById('play').addEventListener('click', ()=>{\n\t\tif(game.isPlaying){\n\t\t\tgame.pause();\n\t\t}else{\n\t\t\tgame.play();\n\t\t}\n\t});\n\n\twindow.onblur = ()=>{\n\t\tgame.pause();\n\t};\n\n})();\n"]}